

docker-compose down
docker-compose up -d --build

docker-compose down
docker-compose up -d


----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------


projeto: encurtador de url

1000 novas URLS por minuto
ratio de leitura e escrita em 500:1

Trafego estimado
500.000 RPM - 500.000 requeste por minuto

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------



Armazenamento estimado

    Tabela users
        id  varchar(36) pk
        name varchar(255)
        email varchar(255) unique
        password varchar(255)
        created_at datetime(3)

    Tabela urls - 750bytes por registro
        hash varchar(6) pk
        target_url varchar(max)
        created_at datetime(3)
        exprires_at datetime(3)
        user_id  varchar(36)

Cache
    LRU, nao LFU ou FIFO
    Somente os registros das ultimas 24 horas

Gerador de hash
    MD5

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------


Servidor            - NGINX                         - Docker/Kubernetes
Load Balance        - NGINX                         - Docker/Kubernetes
Site                - VueJS                         - Docker/Kubernetes
APM                 - New Relic ou Jaeger           - Docker/Kubernetes -  Application Performance Monitoring
Secret Manager      - Vault                         - Docker/Kubernetes
WebService Core API - Golang                        - Docker/Kubernetes
WebService Core API - Golang                        - Docker/Kubernetes
WebService Core API - Golang                        - Docker/Kubernetes
Service Espurgo     - Golang                        - Docker/Kubernetes
Cache               - Redis/MenCache/ElasticCache   - Docker/Kubernetes
Mensageria          - RabbitMQ                      - Docker/Kubernetes
Banco de Dados      - MongoDB - Escritura - Master  - Docker/Kubernetes
Banco de Dados      - MongoDB - Leitura   - Replica - Docker/Kubernetes
Broker              - RabbitMQ                      - Docker/Kubernetes
Metrics Service     - Prometheus                    - Docker/Kubernetes
Metrics Service     - Grafana                       - Docker/Kubernetes


----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------



import "crypto/md5"

var original = "my string comes here"
var hash = md5.New(original)


package main

import (
    "crypto/md5"
    "fmt"
)

func main() {
    data := []byte("hello")
    fmt.Printf("%x", md5.Sum(data))
}




import (
    "crypto/md5"
    "encoding/hex"
)

func GetMD5Hash(text string) string {
   hash := md5.Sum([]byte(text))
   return hex.EncodeToString(hash[:])
}



package main

import (
    "crypto/md5"
    "encoding/hex"
    "fmt"
)

func main() {
    var str string = "hello world"

    hasher := md5.New()
    hasher.Write([]byte(str))
    fmt.Println(str)
    fmt.Println(hex.EncodeToString(hasher.Sum(nil)))
}



package main

import (
    "crypto/md5"
    "fmt"
    "io"
)

func main() {
    h := md5.New()
    io.WriteString(h, "The fog is getting thicker!")
    fmt.Printf("%x", h.Sum(nil))
}




import (
    "crypto/md5"
    "encoding/hex"
)

func GetMD5Hash(text string) string {
    hasher := md5.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}


// MD5 hashes using md5 algorithm
func MD5(text string) string {
    algorithm := md5.New()
    algorithm.Write([]byte(text))
    return hex.EncodeToString(algorithm.Sum(nil))
}


// MD5 hashes using md5 algorithm
func MD5(text string) string {
    data := []byte(text)
    return fmt.Sprintf("%x", md5.Sum(data))
}


import (
    "crypto/md5"
    "encoding/hex"
    "fmt"
)

func GetMD5HashWithWrite(text string) string {
    hasher := md5.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

func GetMD5HashWithSum(text string) string {
    hasher := md5.New()
    return hex.EncodeToString(hasher.Sum([]byte(text)))
}



func GetMD5HashWithWrite(text string) []byte {
    hasher := md5.New()
    hasher.Write([]byte(text))
    return hasher.Sum(nil)
}

func GetMD5HashWithSum(text string) [16]byte {
    return md5.Sum([]byte(text))
}



func GetMD5HashWithSum(text string) string {
    hash := md5.Sum([]byte(text))
    return hex.EncodeToString(hash[:]) 
}


func main() {
    hash := md5.New()
    b := []byte("test")
    hash.Write(b)
    fmt.Printf("way one : %x\n", hash.Sum(nil))
    fmt.Printf("way two : %x\n", md5.Sum(b))
}



package main

import (
    "crypto/md5"
    "fmt"
)

func main() {
    hash := md5.New()
    b := []byte("test")
    fmt.Printf("%x\n", hash.Sum(b))
    hash.Write(b)
    fmt.Printf("%x\n", hash.Sum(nil))
}



import (
    "crypto/md5"
    "encoding/hex"
)

func GetMD5Hash(text string) string {
    hasher := md5.New()
    hasher.Write([]byte(text))
    ret


str := "hello"
hasher := md5.New()
hasher.Write([]byte(str))
encodedString := b64.StdEncoding.EncodeToString(hasher.Sum(nil))
fmt.Println(encodedString)


    func makeMD5(in string) string {
    binHash := md5.Sum([]byte(in))
    return hex.EncodeToString(binHash[:])
}


import (
        "crypto/md5"
        "fmt"
)

func main() {
        
        hashString:= []byte("Hello World!")
        fmt.Printf("%x", md5.Sum(hashString))
}


----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
